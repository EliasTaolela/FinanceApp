@model List<FinanceApp.Models.Expense>

<h2>Expenses</h2>

<div class="container">
    <table class="table table-bordered">
        <thead class="table-light">
            <tr>
                <th>Description</th>
                <th>Amount</th>
                <th>Category</th>
                <th>Date</th>
                <th>Option</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in Model)
            {
                <tr>
                    <td>@expense.Description</td>
                    <td>R @expense.Amount</td>
                    <td>@expense.Category</td>
                    <td>@expense.Date.ToShortDateString()</td>
                    
                    
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = expense.Id }) |
                        @Html.ActionLink("Delete", "Delete", new { id = expense.Id })
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-dark">@Html.ActionLink("Create New", "Create")</button>
    
    </div>

<h2>Expense Chart</h2>
<div>
    <canvas style="max-width:450px; max-height:450px" id="myChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const ctx = document.getElementById('myChart');

    fetch('/Expenses/GetChart')
         .then(response=> response.json())
         .then(data => {
             new Chart(ctx, {
                    type: 'pie',
                        data: {
                          labels: data.map(d => d.category),
                          datasets: [{
                            data: data.map(d => d.total),
                                                }]
                        },

             });
         })

    
</script>